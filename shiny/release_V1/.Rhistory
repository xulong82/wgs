text(y = bar, x = cons + 5e1, labels = cons)
dev.off()
cons
pdf("~/Dropbox/GitHub/glmm/Manu/cons.pdf", width = 12, height = 8)
op <- par(mar = c(5, 20, 4, 3))
bar <- barplot(cons, xlim = c(0, max(cons) + 2e2),
axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = cons + 1e2, labels = cons)
dev.off()
missense
unique(missense$UID)
pdf("~/Dropbox/GitHub/glmm/Manu/cons.pdf", width = 10, height = 6)
op <- par(mar = c(5, 20, 4, 3))
bar <- barplot(cons, xlim = c(0, max(cons) + 2e2),
axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = cons + 1e2, labels = cons)
dev.off()
rm(list = ls())
load("~/Dropbox/GitHub/glmm/data/mcmc.rdt")
fit = as.data.frame(mcmc$mcmc); meta = mcmc$meta; vep = mcmc$vep
names(vep) = gsub("X.Uploaded_variation", "UID", names(vep))
fit$P = pnorm(abs(fit$mean), sd = fit$sd, lower.tail = F) * 2
fit$sign <- as.factor(sign(fit$mean))
gwas = cbind(meta, fit[meta$UID, ])
head(gwas)
ggplot(gwas, aes(x = MAF, y = mean, colour = sign, size = -log10(P))) +
geom_point(shape = 111, alpha = 0.7) + scale_size(range = c(1, 5)) +
theme_bw() + xlab("MAF") + ylab("Effect") + guides(color = F, text = F) +
scale_color_manual(values = c("dodgerblue3", "firebrick1")) +
theme(axis.line = element_line(size = .5), legend.key = element_blank())
head(gwas)
gwas[which.min(gwas$P), ]
gwas <- filter(gwas, P < 1e-4)
gwas5 <- filter(gwas, P < 1e-5)
gwas6 <- filter(gwas, P < 1e-6)
gwas7 <- filter(gwas, P < 1e-7)
gwas7
gwas6
gwas6$MAF
gwas = cbind(meta, fit[meta$UID, ])
gwas4 <- filter(gwas, P < 1e-4)
gwas5 <- filter(gwas, P < 1e-5)
gwas6 <- filter(gwas, P < 1e-6)
gwas7 <- filter(gwas, P < 1e-7)
gwas = gwas4
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
vep_p <- filter(vep, UID %in% gwas$UID)
vep_p[vep_p$Consequence == "missense_variant", ]
gwasTable <- cbind(vep_p, group[match(vep_p$UID, group$UID), ])
gwasTable <- gwasTable[-1]
missense <- filter(gwasTable, grepl("missense_variant", Consequence))
missense
length(group)
as.character(unique(group$PEAK))
gwas = gwas5
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
vep_p <- filter(vep, UID %in% gwas$UID)
table(vep_p$Consequence)
vep_p[vep_p$Consequence == "missense_variant", ]
gwas6 <- filter(gwas, P < 1e-6)
gwas = gwas6
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
gwas = gwas7
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
gwas = gwas4
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
pdf("~/Dropbox/GitHub/glmm/Manu/glmm.pdf", width = 6, height = 4, family = "Helvetica")
ggplot(gwas, aes(x = MAF, y = mean, colour = sign, size = -log10(P))) +
geom_point(shape = 111, alpha = 0.7) + scale_size(range = c(1, 5)) +
theme_bw() + xlab("MAF") + ylab("Effect") + guides(color = F, text = F) +
scale_color_manual(values = c("dodgerblue3", "firebrick1")) +
theme(axis.line = element_line(size = .5), legend.key = element_blank())
dev.off() # annotations???
head(gwas)
table(gwas$sign)
1418 / 1603
cor(gwas$MAF, abs(gwas$mean))
vep_p <- filter(vep, UID %in% gwas$UID)
table(vep_p$Consequence)
gwas = gwas5
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
pdf("~/Dropbox/GitHub/glmm/Manu/glmm.pdf", width = 6, height = 4, family = "Helvetica")
ggplot(gwas, aes(x = MAF, y = mean, colour = sign, size = -log10(P))) +
geom_point(shape = 111, alpha = 0.7) + scale_size(range = c(1, 5)) +
theme_bw() + xlab("MAF") + ylab("Effect") + guides(color = F, text = F) +
scale_color_manual(values = c("dodgerblue3", "firebrick1")) +
theme(axis.line = element_line(size = .5), legend.key = element_blank())
dev.off() # annotations???
table(gwas$sign)
239 / 246
cor(gwas$MAF, abs(gwas$mean))
vep_p <- filter(vep, UID %in% gwas$UID)
table(vep_p$Consequence)
so <- read.delim("~/Dropbox/GitHub/X/so.txt", stringsAsFactors = F); so <- gsub(" ", "", so$SO.term)
cons <- sapply(so, function(y) sum(grepl(y, vep_p$Consequence))); cons <- cons[! cons == 0]
sort(cons / sum(cons), decreasing = T)
pdf("~/Dropbox/GitHub/glmm/Manu/cons.pdf", width = 10, height = 6)
op <- par(mar = c(5, 20, 4, 3))
bar <- barplot(cons, xlim = c(0, max(cons) + 2e2),
axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = cons + 1e2, labels = cons)
dev.off()
vep_p[vep_p$Consequence == "missense_variant", ]
pdf("~/Dropbox/GitHub/glmm/Manu/cons.pdf", width = 10, height = 6)
op <- par(mar = c(5, 20, 4, 3))
bar <- barplot(cons, xlim = c(0, max(cons) + 2e2),
axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = cons + 1e1, labels = cons)
dev.off()
pdf("~/Dropbox/GitHub/glmm/Manu/cons.pdf", width = 10, height = 6)
op <- par(mar = c(5, 20, 4, 3))
bar <- barplot(cons, xlim = c(0, max(cons) + 2e2),
axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = cons + 5e1, labels = cons)
dev.off()
pdf("~/Dropbox/GitHub/glmm/Manu/cons.pdf", width = 10, height = 6)
op <- par(mar = c(5, 20, 4, 3))
bar <- barplot(cons, xlim = c(0, max(cons) + 2e2),
axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = cons + 3e1, labels = cons)
dev.off()
gwas = gwas4
pdf("~/Dropbox/GitHub/glmm/Manu/glmm.pdf", width = 6, height = 4, family = "Helvetica")
ggplot(gwas, aes(x = MAF, y = mean, colour = sign, size = -log10(P))) +
geom_point(shape = 111, alpha = 0.7) + scale_size(range = c(1, 5)) +
theme_bw() + xlab("MAF") + ylab("Effect") + guides(color = F, text = F) +
scale_color_manual(values = c("dodgerblue3", "firebrick1")) +
theme(axis.line = element_line(size = .5), legend.key = element_blank())
dev.off() # annotations???
gwas = gwas5
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
vep_p <- filter(vep, UID %in% gwas$UID)
table(vep_p$Consequence)
so <- read.delim("~/Dropbox/GitHub/X/so.txt", stringsAsFactors = F); so <- gsub(" ", "", so$SO.term)
cons <- sapply(so, function(y) sum(grepl(y, vep_p$Consequence))); cons <- cons[! cons == 0]
sort(cons / sum(cons), decreasing = T)
sum(cons)
vep_p[vep_p$Consequence == "missense_variant", ]
gwasTable <- cbind(vep_p, group[match(vep_p$UID, group$UID), ])
gwasTable <- gwasTable[-1]
missense <- filter(gwasTable, grepl("missense_variant", Consequence))
missense
head(vep_p)
vep_p$Distance
y = vep_p$Distance
y = y[! y == "-"]
y
cons
sort(cons / sum(cons), decreasing = T)
upstream <- filter(gwasTable, grepl("upstream", Consequence))
unique(upstream$UID)
vep_p[vep_p$UID %in% unique(upstream$UID), ]
y = vep_p[vep_p$UID %in% unique(upstream$UID), ]
y
y$Consequences
y$Consequence
sort(cons / sum(cons), decreasing = T)
sort(cons)
gwas = gwas4
vep_p <- filter(vep, UID %in% gwas$UID)
vep_p[vep_p$Consequence == "missense_variant", ]
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
gwasTable <- cbind(vep_p, group[match(vep_p$UID, group$UID), ])
gwasTable <- gwasTable[-1]
missense <- filter(gwasTable, grepl("missense_variant", Consequence))
missense
unique(missense$UID)
gwas = gwas5
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
as.character(unique(group$PEAK))
vep_p <- filter(vep, UID %in% gwas$UID)
table(vep_p$Consequence)
so <- read.delim("~/Dropbox/GitHub/X/so.txt", stringsAsFactors = F); so <- gsub(" ", "", so$SO.term)
cons <- sapply(so, function(y) sum(grepl(y, vep_p$Consequence))); cons <- cons[! cons == 0]
sort(cons / sum(cons), decreasing = T)
gwasTable <- cbind(vep_p, group[match(vep_p$UID, group$UID), ])
gwasTable <- gwasTable[-1]
intron <- filter(gwasTable, grepl("intron_variant", Consequence))
(intron_gene <- intron$Symbol %>% unique)
source("~/Dropbox/GitHub/X/function.R")
intron_gene_gk <- hsGK(intron_gene)
unique(intron$UID)
nrow(intron)
intron_gene
intron_gene_gk
options(stringsAsFactors = F)
gwascat <- read.delim("~/Dropbox/GitHub/glmm/GWAS_catelog/gwas_catalog_v1.0-downloaded_2015-07-22.tsv")
names(gwascat)
table(gwascat$DISEASE.TRAIT) %>% sort %>% tail
gwas_genes <- gwas$MAPPED_GENE %>% unique
gwas_genes
gwas_genes <- gwascat$MAPPED_GENE %>% unique
gwas_genes
gwas_genes <- lapply(gwas_genes, function(x) unlist(strsplit(x, ", ")))
gwas_genes <- lapply(gwas_genes, function(x) unlist(strsplit(x, " - ")))
gwas_genes <- unlist(gwas_genes) %>% unique
gwas_genes
(x = intersect(intron_genes, gwas_genes))
intron_genes
(x = intersect(intron_gene, gwas_genes))
y = lapply(gwas$MAPPED_GENE, function(x) unlist(strsplit(x, ", ")))
y = lapply(y, function(i) unlist(strsplit(i, " - ")))
idx = sapply(y, function(i) any(i %in% x))
gwas_select = gwas[idx, ]
gwas_select = gwascat[idx, ]
idx
(x = intersect(intron_gene, gwas_genes))
y = lapply(gwascat$MAPPED_GENE, function(x) unlist(strsplit(x, ", ")))
y = lapply(y, function(i) unlist(strsplit(i, " - ")))
idx = sapply(y, function(i) any(i %in% x))
gwas_select = gwascat[idx, ]
gwas_select
table(gwas_select$CONTEXT)
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:20]
head(gwas_select)
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("cholesterol", gwas_select$DISEASE.TRAIT), ]
intron_gene
gwas_select[grepl("Alzheimer's disease", gwas_select$DISEASE.TRAIT), ]
x
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("cholesterol", gwas_select$DISEASE.TRAIT), ]
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("Triglycerides", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED.GENE")]
gwas_select[grepl("Triglycerides", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
gwas_select[grepl("Adiponectin levels", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED.GENE")]
gwas_select[grepl("Adiponectin levels", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("Alzheimer's disease", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
gwas_select[grepl("IgG glycosylation", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
gwas_select[grepl("Type 2 diabetes", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
table(gwas_select$CONTEXT)
cons
sort(cons)
head(gwas)
gwasTable
gwasTable[which.min(gwasTable$P), ]
gwas = gwas4
vep_p <- filter(vep, UID %in% gwas$UID)
vep_p[vep_p$Consequence == "missense_variant", ]
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
gwasTable <- cbind(vep_p, group[match(vep_p$UID, group$UID), ])
gwasTable <- gwasTable[-1]
missense <- filter(gwasTable, grepl("missense_variant", Consequence))
missense
gwas_genes
"LRRC8E" %in% gwas_genes
"NANOS1" %in% gwas_genes
"ZNF684" %in% gwas_genes
"GKN1" %in% gwas_genes
gwas_select[grepl("cholesterol", gwas_select$DISEASE.TRAIT), ]
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
library(ape)
library(amap)
library(dplyr)
library(stargazer)
rm(list = ls())
setwd("~/Dropbox/GitHub/pmca")
load("./dataForPMCA_chosenGenes.RData")
(gene = colnames(X))
X["Prnp", ]
X[, "Prnp"]
X[, "Psen"]
X[, "Psen1"]
X = X[, gene != "Prnp"]
Y = Y[, gene != "Prnp"]
(cell = rownames(Y)) # single cell RNA-seq
(sample = rownames(X)) # time serial AD bulk RNA-seq
geno = gsub(".*(WT|APP).*", "\\1", sample)
month = gsub(".*(2m|4m|5m|6m).*", "\\1", sample)
group = c("WT2m", "WT4m", "WT5m", "WT6m", "APP2m", "APP4m", "APP5m", "APP6m")
group = factor(paste0(geno, month), levels = group)
group
wt2m = colMeans(X[group == "WT2m", ])
X = sweep(X, 2, wt2m, "-") # WT:2m reference
head(X)
X = t(sapply(levels(group), function(x) colMeans(X[group == x, ])))
head(X)
X = sweep(X, 2, X[1, ], "-")[-1, ] # WT:2m reference
head(X)
X[1:5, 1:5]
cell
major = gsub("[0-9]+$", "", cell)
major
hc1 <- hcluster(Y, method = "pearson", link = "average") %>% as.phylo
plot(hc1, cex=0.7, type = "unrooted")
plot(hc1, cex=0.7, direction = "downward")
plot(hc1, cex=0.7, direction = "downward", tip.col = major)
plot(hc1, cex=0.7, direction = "downward", tip.col = as.numeric(major))
plot(hc1, cex=0.7, direction = "downward", tip.col = as.numeric(as.factgor(major)))
plot(hc1, cex=0.7, direction = "downward", tip.col = as.numeric(as.factor(major)))
X[1:5, 1:5]
Xp = X - rowMeans(X)
Yp = Y - rowMeans(Y)
dim(Xp)
dim(Yp)
C = Xp %*% t(Yp) / ncol(X) # R's
C[1:5, 1:5]
xx = sample(ncol(X))
xx
C2 = Xp[, xx] %*% t(Yp[, xx]) / ncol(X) # R's
C2[1:5, 1:5]
C == C2
C[1:5, 1:5]
C2[1:5, 1:5]
svd.c = svd(C)
u = svd.c$u # left singular vector
v = svd.c$v # right signular vector
d = svd.c$d # cross-covariance
d
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
plot(u[, 1])
barplot(u[, 1])
barplot(u[1,  ])
barplot(v[1,  ])
barplot(u[, 2])
barplot(v[2,  ])
barplot(v[ , 1])
barplot(u[2,  ])
C
A = t(Xp) %*% u # projections of X onto u
B = t(Yp) %*% v # projections of Y onto v
u
v
Zx = X %*% A
Zx
t(Zx)
scale(t(Zx))
scale(Zx[1, ])
Zx <- t(scale(t(Zx), scale = T, center = F))
Zy <- t(scale(t(Zy), scale = T, center = F)) # canonical
Zy = Y %*% A # Robyn
Zy <- t(scale(t(Zy), scale = T, center = F)) # canonical
scores.pos <- get.scores(Zx, Zy) # distance
source("get.scores.R")
scores.pos <- get.scores(Zx, Zy) # distance
scores.pos
Zx
Zy
scores.pos[1, 1, 1]
Zx[1, 1]
Zy[1, 1]
Zy[1, 1] - Zx[1, 1]
Ystar <- t(apply(Y,1,shuffle))
Ystar <- t(apply(Y,1,function(x) x-1))
source("pmca.R")
source("get.mca.R")
source("get.inter.R")
source("get.scores.R")
source("match.patterns.R")
source("iterative.proc.R")
source("permutation.proc.R")
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
by = 2; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
it.result <- iterative.proc(scores.ran, alpha, w, method = method, by = by, plot=plot, tau=0.3)
w <- apply(Zx, 2, sd) # get starting window vector
it.result <- iterative.proc(scores.ran, alpha, w, method = method, by = by, plot=plot, tau=0.3)
it.result
scores=scores.ran
alpha = 0.05
w
head(Zx)
Zx
w
by = 2
rowterms = rownames(Y)
B <- dim(scores)[4]; p <- dim(scores)[3]; J <- dim(scores)[2]; q <- dim(scores)[1]
p
J
q
fpr <- array(dim=c(p,J,B))
FPR <- array(dim=c(p,J))
done <- FALSE
w
w
Zx
Zy
shiny::runApp('~/Dropbox/GitHub/Adsp/shiny/release_V1')
